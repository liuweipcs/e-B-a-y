<?php 

/**
 * this class is auto generated by program
 * 
 * @package application.modules.products.components.AmazonHome 
 */
class AmazonAutoAccessory extends AmazonUpload implements IAmazonUpload
{
	/**
	 * @inheritdoc
	 * @noreturn
	 */
	public function init()
	{
		parent::init();
	}	


	

    /**
     * 创建产品
     * @return bool
     */
    protected function createProduct()
    {
        $data = $this->_getBaseInfo();
        $xsd2 = UebModel::model('AmazonProdataxsd')->findByPk($this->product->xsd_type[1]);

        if (empty($xsd2)) {
            throw new Exception ("Error Processing Request", 1);
        }
        $subcate = $xsd2->category;

        $arr1 = array('AutoAccessoryMisc','AutoPart');
        $arr2 = array('PowersportsPart','Autooil','CleaningOrRepairKit');
        $arr3 = array('PowersportsVehicle','Autobattery');
        $arr4 = array('ProtectiveGear');
        $arr5 = array('Tire','Rims','TireAndWheel','Vehicle','Motorcyclepart','Motorcycleaccessory');
        $arr6 = array('Autochemical');
        $arr7 = array('Ridingboots');
        $arr8 = array('RidingApparel');
        $arr9 = array('Helmet');
        $arr10 = array('Ridinggloves');//XSD定义字段存在问题暂时搁置
        
        //子分类分组1
        if (in_array($subcate,$arr1)) {
            $method = '_subCategory1';
            $this->$method($data,$subcate);
        }
        //子分类分组2
        if (in_array($subcate,$arr2)) {
            $method = '_subCategory2';
            $this->$method($data,$subcate);
        }
        //子分类分组3
        if (in_array($subcate,$arr3)) {
            $method = '_subCategory3';
            $this->$method($data,$subcate);
        }
        //子分类分组4
        if (in_array($subcate,$arr4)) {
            $method = '_subCategory4';
            $this->$method($data,$subcate);
        }
        //子分类分组5
        if (in_array($subcate,$arr5)) {
            $method = '_subCategory5';
            $this->$method($data,$subcate);
        }
        //子分类分组6
        if (in_array($subcate,$arr6)) {
            $method = '_subCategory6';
            $this->$method($data,$subcate);
        }

        //子分类分组7
        if (in_array($subcate,$arr7)) {
            $method = '_subCategory7';
            $this->$method($data,$subcate);
        }

        //子分类分组8
        if (in_array($subcate,$arr8)) {
            $method = '_subCategory8';
            $this->$method($data,$subcate);
        }

        //子分类分组9
        if (in_array($subcate,$arr9)) {
            $method = '_subCategory9';
            $this->$method($data,$subcate);
        }

         //子分类分组10
        if (in_array($subcate,$arr10)) {
            throw new Exception("上传".$subcate."分类产品异常", 1);
            Yii::app()->end();
        	// $method = '_subCategory10';
         //    $this->$method($data,$subcate);
        }

        return true;
    }


	/**
	 * ('AutoAccessoryMisc','AutoPart')分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _subCategory1($data,$subcate)
	{       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                            'ModelName' => 'unknown',
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                            'ModelName' => 'unknown',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
                unset($child['SKU']);
				unset($child['StandardProductID']);

				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
	                            'Size' => $size,
	                            'ModelName' => 'unknown',
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('PowersportsPart','Autooil','CleaningOrRepairKit')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory2($data,$subcate)
    {       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
	                            'Size' => $size,
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('PowersportsVehicle','Autobattery')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory3($data,$subcate)
    {       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                        ),
                    ),
                ),
            );

            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product'); 
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';

				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('ProtectiveGear')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory4($data,$subcate)
    {       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                        	'Department' => 'unisex-adult',
                        	'StyleKeywords' => 'all-weather',
                        	'ModelName' => 'unknown',
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'Department' => 'unisex-adult',
                            'StyleKeywords' => 'all-weather',
                            'ModelName' => 'unknown',
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'Department' => 'unisex-adult',
                                'StyleKeywords' => 'all-weather',
                            	'ModelName' => 'unknown',
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
	                            'Size' => $size,
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('Tire','Rims','TireAndWheel','Vehicle','Motorcyclepart','Motorcycleaccessory')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory5($data,$subcate)
    {       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'ModelName' => 'unknown',
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'ModelName' => 'unknown',
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
                            	'ModelName' => 'unknown',
	                            'Size' => $size,
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('Autochemical')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory6($data,$subcate)
    {       //无变体
            if ($this->product->product_is_multi == 2) {
                throw new Exception("Industrial分类产品不存在变体", 1);
                Yii::app()->end();
            }
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'Efficiency' => 'good',
                        ),
                    ),
                ),
            );

            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
            
       		//将其推到任务队列
			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $this->product->sku,
					':type'=> self::PRODUCT,
					)
			));

			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $this->product->sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML($xmls, SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('Ridingboots')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory7($data,$subcate)
    {  
     	//单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'ModelName' => 'unknown',
                            'Size' => 'normal',
                            'Department' => 'unisex-adult',
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'ModelName' => 'unknown',
                            'Size' => 'normal',
                            'Department' => 'unisex-adult',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
                            	'ModelName' => 'unknown',
	                            'Size' => $size,
	                            'Department' => 'unisex-adult',
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('RidingApparel')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory8($data,$subcate)
    {       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                        	'ClothingType' => 'Gloves',
                        	'Department' => 'unisex-adult',
                        	'StyleKeywords' => 'all-weather',
                        	'ModelName' => 'unknown',
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'ClothingType' => 'Gloves',
                            'Department' => 'unisex-adult',
                            'StyleKeywords' => 'all-weather',
                            'ModelName' => 'unknown',
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'ClothingType' => 'Gloves',
                                'Department' => 'unisex-adult',
                                'StyleKeywords' => 'all-weather',
                            	'ModelName' => 'unknown',
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
	                            'Size' => $size,
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('Helmet')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory9($data,$subcate)
    {       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                        	'Department' => 'unisex-adult',
                        	'StyleKeywords' => 'all-weather',
                        	'SafetyRating' => 'Other',
                            'ModelName' => 'unknown',
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                            'ModelNumber' => 'unknown',
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'Department' => 'unisex-adult',
                            'StyleKeywords' => 'all-weather',
                            'SafetyRating' => 'Other',
                            'ModelName' => 'unknown',
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'Size' => 'normal',
                            'ModelNumber' => 'unknown',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'Department' => 'unisex-adult',
                                'StyleKeywords' => 'all-weather',
                                'SafetyRating' => 'Other',
                                'ModelName' => 'unknown',
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
	                            'Size' => $size,
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

    /**
     * ('Ridinggloves')分类组装数据
     *
     * @throws Exception
     */
    public function _subCategory10($data,$subcate)
    {  
     	//单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array('Department' => 'unisex-adult',
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),

                            'ModelName' => 'unknown',
                            'Size' => 'normal',
                            'SizeMap' => 'default',
                            'SoleMaterial' => unserialize($this->product->productdata->product_data)['SoleMaterial'],
                            'TreadDepth' => array(
                            	'@unitOfMeasure' => 'CM',
								'%' => unserialize($this->product->productdata->product_data)['TreadDepth'],
                            	),
                            'UniformTireQualityGradeRating' => unserialize($this->product->productdata->product_data)['UniformTireQualityGradeRating'],
                            'Viscosity' => unserialize($this->product->productdata->product_data)['Viscosity'],
                            'Voltage' => unserialize($this->product->productdata->product_data)['Voltage'],
                            'VolumeCapacityName' => unserialize($this->product->productdata->product_data)['VolumeCapacityName'],
                            'WarrantyDescription' => unserialize($this->product->productdata->product_data)['WarrantyDescription'],
                            'WaterResistanceLevel' => unserialize($this->product->productdata->product_data)['WaterResistanceLevel'],
                            'Wattage' => unserialize($this->product->productdata->product_data)['Wattage'],
                            'WheelBackspacing' => array(
                            	'@unitOfMeasure' => 'CM',
								'%' => unserialize($this->product->productdata->product_data)['WheelBackspacing'],
                            	), 
                            'Efficiency' => unserialize($this->product->productdata->product_data)['Efficiency'],
                          
                          	
                        ),
                    ),
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	$data['ProductData'] = array(
                'AutoAccessory' => array(
                    'ProductType' => array(
                        $subcate => array(
                            'VariationData' => array(
                                'Parentage' => 'parent',
                                'VariationTheme' => $this->product->variation_theme,
                            ),
                            'ColorSpecification' => array(
                                'Color' => 'popular',
                                'ColorMap' => 'default',
                            ),
                            'ModelName' => 'unknown',
                            'Size' => 'normal',
                            'Department' => 'unisex-adult',
                        ),
                    ),
                ),
            );
        	 
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
                $data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
                unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				$color = json_decode($sonprd->variations,TRUE)['Color'] ? json_decode($sonprd->variations,TRUE)['Color'] : 'default';
				$size = json_decode($sonprd->variations,TRUE)['Size'] ? json_decode($sonprd->variations,TRUE)['Size'] : 'default';
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
                    'AutoAccessory' => array(
                        'ProductType' => array(
                            $subcate => array(
                                'VariationData' => array(
                                    'Parentage' => 'child',
                                    'VariationTheme' => $this->product->variation_theme,
                                ),
                                'ColorSpecification' => array(
                                	'Color' => $color,
                                	'ColorMap' => 'default',
                            	),
                            	'ModelName' => 'unknown',
	                            'Size' => $size,
	                            'Department' => 'unisex-adult',
                            ),
                        ),
                    ),
				);

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }
        // echo '<pre>';
        // var_dump($xmls);die;
       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}





}
// end of class
