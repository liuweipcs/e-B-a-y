
<?php 

/**
 * this class is auto generated by program
 * 
 * @package application.modules.products.components.AmazonHome 
 */
class AmazonMusicalInstruments extends AmazonUpload implements IAmazonUpload
{
	/**
	 * @inheritdoc
	 * @noreturn
	 */
	public function init()
	{
		parent::init();
	}

	/**
	 * 根据子分类名映射相应的子分类方法处理
	 * @return string
	 */
	protected function categoryMethod($subcate) 
	{
		$arr1 = array('BrassAndWoodwindInstruments','Guitars','KeyboardInstruments','MiscWorldInstruments','SoundAndRecordingEquipment');
		$arr2 = array('InstrumentPartsAndAccessories','PercussionInstruments','StringedInstruments');

		if (in_array($subcate, $arr1)) {
			$method = '_subCategory1';
		} else if (in_array($subcate, $arr2)) {
			$method = '_subCategory2';
		} else {
			throw new Exception("{$subcate}子分类未定义", 1);
		}
		return $method;
	}
	
    /**
	 * 上传产品
	 *
	 * @return bool
	 */
	protected function createProduct()
	{
		$data = $this->_getBaseInfo();
		$xsd1 = UebModel::model('AmazonProdataxsd')->findByPk($this->product->xsd_type[0]);
		$xsd2 = UebModel::model('AmazonProdataxsd')->findByPk($this->product->xsd_type[1]);
		if (empty($xsd1)) {
			throw new Exception("缺少精确的分类模板信息", 1);
		}
		if (empty($xsd2)) {
			throw new Exception("缺少精确的XSD模板信息", 1);
		}
		$cate = $xsd1->category;
		$subcate = $xsd2->category;
		//获取分类方法名
		$method = $this->categoryMethod($subcate);

		$type = $this->product->product_is_multi;
		$data['DescriptionData']['MerchantCatalogNumber']=$this->product->description->mfr_partnumber;
		
		$data['ProductData'] = array(
				$cate => array(
					'ProductType' => array(
						$subcate => array(),
						),
					),
				);

		//单品
		if ($type == 0) {
			$array = $this->$method($type);
			$array['ModelName'] = $this->description->brand;
			$array['ModelNumber'] = $this->description->mfr_partnumber;
			$data['ProductData'][$cate]['ProductType'][$subcate] = $array;
			$xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem2($data,$cate,$subcate), 'Product');
		}
		//多属性
		else if ($type == 2) {
			//父体设置 $parentage 1为父体 2为子体
			$array = $this->$method($type,$parentage = 1);
			$array['ModelName'] = $this->description->brand;
			$array['ModelNumber'] = $this->description->mfr_partnumber;
			$array['VariationData']['VariationTheme'] = $this->mapThemeVaris($this->product->variation_theme);
			$data['ProductData'][$cate]['ProductType'][$subcate] = $array;

			$xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem2($data,$cate,$subcate), 'Product');

			foreach ($this->product->sonskues as $sonprd) {
				$data['DescriptionData']['MerchantCatalogNumber']=$sonprd->mfr;
				$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));

				//修改子sku产品sku码
				$child['SKU'] = $sonprd->seller_sku;

				//修改子sku UPC码
				$child['StandardProductID']['Type']  = $sonprd['standard_product_id_type'];
				$child['StandardProductID']['Value'] = $sonprd['standard_product_id'];

				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;

				$array = $this->$method($type,$parentage = 2);
				
				$array['VariationData']['VariationTheme'] = $this->mapThemeVaris($this->product->variation_theme);
				$array['ColorSpecification']['Color'] = $variations['Color'];
				$array['ColorSpecification']['ColorMap'] = $variations['Color'];
				$array['Size'] = $variations['Size'];
				$array['ModelName'] = $this->description->brand;
				$array['ModelNumber'] = $sonprd->mfr;
				$child['ProductData'][$cate]['ProductType'][$subcate] = $array;

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem2($child,$cate,$subcate), 'Product');
				
			}
		}
		//将其推到任务队列
		foreach ($xmls as $sku => $xml) {
			//查找是否已经存在
			$found = UebModel::model('AmazonProductTask')->find("account_id=:aid AND amz_product_id=:id AND type=:type AND sku=:sku",
				array(
					':id' => $this->product->id,
					':aid' => $this->product->account_id,
					':type' => self::PRODUCT,
					':sku' => $sku,
					));

			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("保存{$sku}产品XML数据出错", 1);
			}
		}

		//记录日志
		$this->addLog(array(
			'account_id' => $this->product->account_id,
			'amz_product_id' => $this->product->id,
			'title' => empty($found) ? '添加产品' : '更新产品',
			'content' => '',
			'type' => self::PRODUCT,
			'num' => 1,
			'operator' => empty($found) ? 1 : 2,
		));

	}
	/**
     * 去除数组空值
     * @param array $data
     * @param $pcate 主分类名称
     * @param $ccate 子分类名称
     * @return array
     */
    protected function removeEmptyItem2(array $data,$pcate,$ccate)
    {
        //handle descript first
        foreach ($data['DescriptionData'] as $key => $value) {
            if ($this->isEmpty($value)) {
                unset($data['DescriptionData'][$key]);
            }
        }

        foreach ($data['ProductData'][$pcate]['ProductType'][$ccate] as $key => $value) {
            if ($this->isEmpty($value)) {
                unset($data['ProductData'][$pcate]['ProductType'][$ccate][$key]);
            }
        }

        foreach ($data as $key => $value) {
            if ($this->isEmpty($value)) {
                unset($data[$key]);
            }
        }

        return $data;
    }


	/**
	 * 映射变体名
	 * 
	 * return string
	 */
	protected function mapThemeVaris($key)
	{
		$array = array(
			'Color' => 'Color',
			'Size' => 'Size',
			'Size-Color' => 'SizeColor',
		);

		if (isset($array[$key])) {
			return $array[$key];
		} else {
			return $key;
		}
	}

	/**
	 * ('BrassAndWoodwindInstruments','Guitars','KeyboardInstruments','MiscWorldInstruments','SoundAndRecordingEquipment')分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _subCategory1($type,$parentage)
	{       //单品
        if ($type == 0) {
            return array(
                    'ColorSpecification' => array(
                    	'Color' => '',
                    	'ColorMap' => ''
                    	),
                    'Size' => '',
                    'ModelName' => 'unknown',
                    'ModelNumber' => 'NA',
	            	);
            		
        }
       	//多属性 
        else if ($type == 2 && $parentage == 1) {
        	//父体数据
        	return array(
                    'VariationData' => array(
	                        'Parentage' => 'parent',
	                        'VariationTheme' => 'Color',
                    		),
                    'ColorSpecification' => array(
                    	'Color' => '',
                    	'ColorMap' => ''
                    	),
                    'ModelName' => 'unknown',
                    'ModelNumber' => 'NA',
                    );
        }
        //子体数据 
        else if ($type == 2 && $parentage == 2) {
        	return array(
                    'VariationData' => array(
	                        'Parentage' => 'child',
	                        'VariationTheme' => 'Color',
                    		),
                    'ColorSpecification' => array(
                    	'Color' => '',
                    	'ColorMap' => ''
                    	),
                    'Size' => '',
                    'ModelName' => 'unknown',
                    'ModelNumber' => 'NA',
	                );
        } else {
        	throw new Exception("分类产品数据异常", 1);
        }
	}

	/**
	 * ('InstrumentPartsAndAccessories','PercussionInstruments','StringedInstruments')分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _subCategory2($type,$parentage)
	{       //单品
        if ($type == 0) {
            return array(
                    'ColorSpecification' => array(
                    	'Color' => '',
                    	'ColorMap' => ''
                    	),
                    'Size' => '',
                    'ModelName' => 'unknown',
                    'ModelNumber' => 'NA',
	            	);
        }
       	//多属性 
        else if ($type == 2 && $parentage == 1) {
        	//父体数据
        	return array(
                    'VariationData' => array(
	                        'Parentage' => 'parent',
	                        'VariationTheme' => $this->mapThemeVaris($this->product->variation_theme),
                    		),
                    'ColorSpecification' => array(
                    	'Color' => '',
                    	'ColorMap' => ''
                    	),
                    'ModelName' => 'unknown',
                    'ModelNumber' => 'NA',
                    );
        			
        }
        //子体数据 
        else if ($type == 2 && $parentage == 2) {
        	return array(
                    'VariationData' => array(
	                        'Parentage' => 'child',
	                        'VariationTheme' => $this->mapThemeVaris($this->product->variation_theme),
                    		),
                    'ColorSpecification' => array(
                    	'Color' => '',
                    	'ColorMap' => ''
                    	),
                    'Size' => '',
                    'ModelName' => 'unknown',
                    'ModelNumber' => 'NA',
	                );
        } else {
        	throw new Exception("分类产品数据异常", 1);
        }
	}
}
// end of class
