<?php 

/**
 * this class is auto generated by program
 * 
 * @package application.modules.products.components.AmazonHome 
 */
class AmazonHome extends AmazonUpload implements IAmazonUpload
{
	/**
	 * @inheritdoc
	 * @noreturn
	 */
	public function init()
	{
		parent::init();
	}	

    /**
     * 创建产品
     * @return bool
     */
    protected function createProduct()
    {
        $xmls = array();
        $data = $this->_getBaseInfo();
        $xsd2 = UebModel::model('AmazonProdataxsd')->findByPk($this->product->xsd_type[1]);

        if (empty($xsd2)) {
            throw new Exception ("Error Processing Request", 1);
        }
        
        //子分类方法名
        $method ='_'.$xsd2->category;
        $this->$method($xmls,$data);

        return true;
    }

	/**
	 * Home分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _Home($xmls,$data) 
	{       //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'Home' => array(
                    'ProductType' =>array(
                    	'Home' => array(
                    		'Efficiency' => 'perfect',
                    		),
                    	), 
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	 $data['ProductData'] = array(
                'Home' => array(
                	'ProductType' => array(
                		'Home' => array(
                    		'VariationData' => array(
                    			'VariationTheme' => $this->product->variation_theme,
                    			),
                    		),
                		),
                	'Parentage' => 'parent',
                ),
            );
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
        	 	$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
					'Home' => array(
						'ProductType' => array(
	                		'Home' => array(
	                			// 'ColorMap' => '',
	                    		'VariationData' => array(
	                    			'VariationTheme' => $this->product->variation_theme,
	                    			),
                    			),
                			),
						'Parentage' => 'child',
					),
				);

				foreach (array_keys($variations) as $name) {
					$child['ProductData']['Home']['ProductType']['Home']['VariationData'][$name] = $variations[$name];
				}

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传Home分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传Home分类产品日志异常", 1);
			}
	}

	/**
	 * BedAndBath分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _BedAndBath($xmls,$data) 
	{ //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'Home' => array(
                    'ProductType' =>array(
                    	'BedAndBath' => array(
                    		'Efficiency' => 'perfect',
                    		),
                    	), 
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	 $data['ProductData'] = array(
                'Home' => array(
                	'ProductType' => array(
                		'BedAndBath' => array(
                    		'VariationData' => array(
                    			'VariationTheme' => $this->product->variation_theme,
                    			),
                    		),
                		),
                	'Parentage' => 'parent',
                ),
            );
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
        	 	$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$colormap = $this->product->variation_theme=='Color'?$this->product->variation_theme:'';
				if($colormap){
					$child['ProductData'] = array(
						'Home' => array(
							'ProductType' => array(
		                		'BedAndBath' => array(
		                			'ColorMap' => $colormap,
		                    		'VariationData' => array(
		                    			'VariationTheme' => $this->product->variation_theme,
		                    			),
	                    			),
	                			),
							'Parentage' => 'child',
						),
					);
				}else {
					$child['ProductData'] = array(
						'Home' => array(
							'ProductType' => array(
		                		'BedAndBath' => array(
		                    		'VariationData' => array(
		                    			'VariationTheme' => $this->product->variation_theme,
		                    			),
	                    			),
	                			),
							'Parentage' => 'child',
						),
					);
				}
				

				foreach (array_keys($variations) as $name) {
					$child['ProductData']['Home']['ProductType']['BedAndBath']['VariationData'][$name] = $variations[$name];
				}

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {

			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传BedAndBath分类产品异常", 1);
			}
			
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传BedAndBath分类产品日志异常", 1);
			}
	}

	/**
	 * FurnitureAndDecor分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _FurnitureAndDecor($xmls,$data) 
	{ //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'Home' => array(
                    'ProductType' =>array(
                    	'FurnitureAndDecor' => array(
                    		'Efficiency' => 'perfect',
                    		),
                    	), 
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	 $data['ProductData'] = array(
                'Home' => array(
                	'ProductType' => array(
                		'FurnitureAndDecor' => array(
                    		'VariationData' => array(
                    			'VariationTheme' => $this->product->variation_theme,
                    			),
                    		),
                		),
                	'Parentage' => 'parent',
                ),
            );
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
        	 	$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
					'Home' => array(
						'ProductType' => array(
	                		'FurnitureAndDecor' => array(
	                			// 'ColorMap' => 'basic',
	                    		'VariationData' => array(
	                    			'VariationTheme' => $this->product->variation_theme,
	                    			),
                    			),
                			),
						'Parentage' => 'child',
					),
				);

				foreach (array_keys($variations) as $name) {
					$child['ProductData']['Home']['ProductType']['FurnitureAndDecor']['VariationData'][$name] = $variations[$name];
				}

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {
			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传FurnitureAndDecor分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传FurnitureAndDecor分类产品日志异常", 1);
			}
	}
	/**
	 * Kitchen分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _Kitchen($xmls,$data) 
	{ //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'Home' => array(
                    'ProductType' =>array(
                    	'Kitchen' => array(
                    		'Efficiency' => 'perfect',
                    		),
                    	), 
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	 $data['ProductData'] = array(
                'Home' => array(
                	'ProductType' => array(
                		'Kitchen' => array(
                    		'VariationData' => array(
                    			'VariationTheme' => $this->product->variation_theme,
                    			),
                    		),
                		),
                	'Parentage' => 'parent',
                ),
            );
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
        	 	$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' =>  $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
					'Home' => array(
						'ProductType' => array(
	                		'Kitchen' => array(
	                			// 'ColorMap' => 'basic',
	                    		'VariationData' => array(
	                    			'VariationTheme' => $this->product->variation_theme,
	                    			),
                    			),
                			),
						'Parentage' => 'child',
					),
				);

				foreach (array_keys($variations) as $name) {
					$child['ProductData']['Home']['ProductType']['Kitchen']['VariationData'][$name] = $variations[$name];
				}

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {
			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传Kitchen分类产品异常", 1);
			}
			
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传Kitchen分类产品日志异常", 1);
			}
	}
	/**
	 * OutdoorLiving分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _OutdoorLiving($xmls,$data) 
	{ //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'Home' => array(
                    'ProductType' =>array(
                    	'OutdoorLiving' => array(
                    		'Efficiency' => 'perfect',
                    		),
                    	), 
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	 $data['ProductData'] = array(
                'Home' => array(
                	'ProductType' => array(
                		'OutdoorLiving' => array(
                    		'VariationData' => array(
                    			'VariationTheme' => $this->product->variation_theme,
                    			),
                    		),
                		),
                	'Parentage' => 'parent',
                ),
            );
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
        	 	$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
					'Home' => array(
						'ProductType' => array(
	                		'OutdoorLiving' => array(
	                			// 'ColorMap' => 'basic',
	                    		'VariationData' => array(
	                    			'VariationTheme' => $this->product->variation_theme,
	                    			),
                    			),
                			),
						'Parentage' => 'child',
					),
				);

				foreach (array_keys($variations) as $name) {
					$child['ProductData']['Home']['ProductType']['OutdoorLiving']['VariationData'][$name] = $variations[$name];
				}

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {
			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();
			

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传OutdoorLiving分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传OutdoorLiving分类产品日志异常", 1);
			}
	}

	/**
	 * SeedsAndPlants分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _SeedsAndPlants($xmls,$data) 
	{ //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'Home' => array(
                    'ProductType' =>array(
                    	'SeedsAndPlants' => array(
                    		'Seasons' => 'Seasons',
                    		),
                    	), 
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	 $data['ProductData'] = array(
                'Home' => array(
                	'ProductType' => array(
                		'SeedsAndPlants' => array(
                    		'VariationData' => array(
                    			'VariationTheme' => $this->product->variation_theme,
                    			),
                    		),
                		),
                	'Parentage' => 'parent',
                ),
            );
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
        	 	$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
					'Home' => array(
						'ProductType' => array(
	                		'SeedsAndPlants' => array(
	                			// 'ColorMap' => 'basic',
	                    		'VariationData' => array(
	                    			'VariationTheme' => $this->product->variation_theme,
	                    			),
                    			),
                			),
						'Parentage' => 'child',
					),
				);

				foreach (array_keys($variations) as $name) {
					$child['ProductData']['Home']['ProductType']['SeedsAndPlants']['VariationData'][$name] = $variations[$name];
				}

				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {
			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传SeedsAndPlants分类产品异常", 1);
			}
		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1+count($reqArrList);
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传SeedsAndPlants分类产品日志异常", 1);
			}
	}
	/**
	 * Art分类组装数据
	 * 
	 * @throws Exception
	 */
	public function _Art($xmls,$data) 
	{ //单品
        if ($this->product->product_is_multi==0) {
            //指定产品分类
            $data['ProductData'] = array(
                'Home' => array(
                    'ProductType' =>array(
                    	'Art' => array(
                    		'Finish' => 'unknow',
                    		),
                    	), 
                ),
            );
            $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
        }
       	//多属性 
        else if ($this->product->product_is_multi==2) {
        	//父体变体设置
        	 $data['ProductData'] = array(
                'Home' => array(
                	'ProductType' => array(
                		'Art' => array(
                    		'VariationData' => array(
                    			'VariationTheme' => $this->product->variation_theme,
                    			),
                    		),
                		),
                	'Parentage' => 'parent',
                ),
            );
        	 $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');

        	//循环所有子sku产品
        	 foreach ($this->product->sonskues as $sonprd) {
        	 	//clone父体信息
        	 	$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				unset($child['StandardProductID']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
					'Home' => array(
						'ProductType' => array(
	                		'Art' => array(
	                			// 'ColorMap' => 'basic',
	                    		'VariationData' => array(
	                    			'VariationTheme' => $this->product->variation_theme,
	                    			),
                    			),
                			),
						'Parentage' => 'child',
					),
				);

				foreach (array_keys($variations) as $name) {
					$child['ProductData']['Home']['ProductType']['Art']['VariationData'][$name] = $variations[$name];
				}
				
				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
        	 }
        }

       //将其推到任务队列
		foreach ($xmls as $sku => $xml) {
			//检查是否已经在任务队列
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();
			
			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传art分类产品异常", 1);
			}
		}
		//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传art分类产品日志异常", 1);
			}
	}
}
// end of class
