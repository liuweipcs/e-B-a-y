<?php 

/**
 * this class is auto generated by program
 * 
 * @package application.modules.products.components.AmazonHome 
 */
class AmazonIndustrial extends AmazonUpload implements IAmazonUpload
{
	/**
	 * @inheritdoc
	 * @noreturn
	 */
	public function init()
	{
		parent::init();
	}	

    /**
     * 创建产品
     * @return bool
     */
    protected function createProduct()
    {
        $xmls = array();
        $data = $this->_getBaseInfo();
        $xsd2 = UebModel::model('AmazonProdataxsd')->findByPk($this->product->xsd_type[1]);

        if (empty($xsd2)) {
            throw new Exception ("Error Processing Request", 1);
        }
        //子分类名
        $subcate = $xsd2->category;
        $this->createSubCategory($xmls,$data,$subcate);

        return true;
    }

	/**
	 * Beauty分类组装数据
	 * 
	 * @throws Exception
	 */
	protected function createSubCategory($xmls,$data,$subcate) 
	{       
		//Industrial单品
		if ($this->product->product_is_multi == 0) {
			//指定产品分类
	        $data['ProductData'] = array(
	            'Industrial' => array(
	                'ProductType' =>array(
	                	$subcate => array(
	                		'BackingType' => 'default',
	                		),
	                	), 
	            ),
	        );
	        $xmls[$this->product->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($data),'Product');
		}
		else if ($this->product->product_is_multi == 2) {
			foreach($this->product->sonskues as $key => $sonprd ) {
				//clone父体信息
				$data['DescriptionData']['MfrPartNumber'] = $sonprd->mfr;
				$child = $data;
				$variations = json_decode($sonprd->variations, true);
				$suffix     = sprintf('(%s)', implode('-', array_values($variations)));
				//修改子sku产品sku码
				unset($child['SKU']);
				//在SKU后面添加StandardProductID
				$Sku_ProductID=array(
					'SKU' => $sonprd->seller_sku,
					'StandardProductID' => array(
						'Type' => $sonprd->standard_product_id_type,
						'Value' => $sonprd->standard_product_id,
						),
					);
				$child=array_merge($Sku_ProductID,$child);
				//修改子sku产品的标题
				$child['DescriptionData']['Title'] = $child['DescriptionData']['Title']. $suffix;
				//修改子sku变体内容
				$child['ProductData'] = array(
					'Industrial' => array(
		                'ProductType' =>array(
		                	$subcate => array(
		                		'BackingType' => 'default',
		                		),
		                	), 
	            	),
				);
				$xmls[$sonprd->sku] = $this->arr2xml->buildXML($this->removeEmptyItem($child), 'Product');
			}
		}
        
		//将其推到任务队列
		//检查是否已经在任务队列
		foreach ($xmls as $sku => $xml) {
			$found = UebModel::model('AmazonProductTask')->find(array(
				'condition' => 'account_id=:account_id AND amz_product_id=:amz_product_id AND sku=:sku AND type=:type',  
				'params' => array(
					':account_id' => $this->product->account_id,
					':amz_product_id' => $this->product->id,
					':sku'=> $this->product->sku,
					':type'=> self::PRODUCT,
					)
			));
			$model = !empty($found) ? $found : new AmazonProductTask();

			$model->flow_no = $this->genUniqidId();
			$model->account_id = $this->product->account_id;
			$model->amz_product_id = $this->product->id;
			$model->sku = $sku;
			$model->type = self::PRODUCT;
			$model->xml = $this->getRealXML(array($xml), SubmitFeedRequest::NEW_PRODUCT);
			$model->status = 1;
			$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$model->create_date = time();	

			$model->save();

			if (empty($model->id)) {
				throw new Exception("上传".$subcate."分类产品异常", 1);
			}

		}
			//上传操作记录日志
			$log = new AmazonUpLog();

			$log->account_id = $this->product->account_id;
			$log->amz_product_id = $this->product->id;
			$log->operator = empty($found)?1:2;
			$log->title = empty($found)?"上传产品":"更新产品";
			$log->content = '';
			$log->type = self::PRODUCT;
			$log->num = 1;
			$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
			$log->create_date = time();

			$log->save();
			if (empty($log->id)) {
				throw new Exception("记录上传".$subcate."分类产品日志异常", 1);
			}
	}

	/**
	 * 上传图片
	 * 
	 * @return bool
	 */
	protected function sendProductImage()
	{
		if($this->product->product_is_multi == 0){
			if (empty($this->product->upload_images)) {
			return;
			}
		
			foreach ($this->product->upload_images as $key => $id) {
				$type= ($key==0)?'Main':sprintf('PT%d', $key);
				$urldir=UebModel::model('AmazonImage')->findByPk($id)->image_url;
				$url = self::IMAGE_BASE_URL . $urldir;
				$reqArrList[] = array(
					'sku' => $this->product->seller_sku,
					'type' => $type,
					'url' => $url,
				);	
			}
		}

		//子sku图片上传
		if ($this->product->product_is_multi == 2) {
			foreach ($this->sonskues as $index => $sonprd) {

				$idArr= json_decode($sonprd->upload_images, true);

				if (empty($idArr)) {
					continue;
				}
				$images = array();
				foreach ($idArr as $key => $value) {
					$criteria = new CDbCriteria();
					$criteria->select = 'image_url';
					$criteria->condition = "id='".$value."'";
					$images[] = UebModel::model('AmazonImage')->find($criteria)->image_url;

					if (empty($images)) {
						continue;
					}
				}

				if (empty($images)) {
					continue;
				}


				$reqArrList [] = array(
					'sku' => $sonprd->seller_sku,
					'type' => 'Main',
					'url' => self::IMAGE_BASE_URL . $images[0],
				);

				$i = 0;

				foreach ($images as $val) {
					if ($i == 0) {
						$i++;
						continue;
					}
					if ($i > 8) break;

					$reqArrList[] = array(
						'sku' => $sonprd->seller_sku,
						'type' => sprintf('PT%d', $i),
						'url' => self::IMAGE_BASE_URL . $val,
					);

					$i++;
				}
			}
		}

		//一次性组装该XML, 不分开处理

		$found = UebModel::model('AmazonProductTask')->find("account_id=:aid AND amz_product_id=:id AND type=:type AND sku=:sku",
			array(
				':aid' => $this->product->account_id,
				':id' => $this->product->id,
				':type' => self::IMAGE,
				':sku' => $this->product->sku,
				));

		$model = !empty($found) ? $found : new AmazonProductTask();

		$model->flow_no = $this->genUniqidId();
		$model->account_id = $this->product->account_id;
		$model->amz_product_id = $this->product->id;
		$model->sku = $this->product->sku;
		$model->type = self::IMAGE;
		$model->xml = $this->getRealXML($reqArrList, SubmitFeedRequest::SEND_IMAGE);
		$model->status = 1;
		$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
		$model->create_date = time();	

		$model->save();

		if (empty($model->id)) {
			throw new Exception("保存图片XML数据出错", 1);
		}

		//日志
		$log = new AmazonUpLog();

		$log->account_id = $this->product->account_id;
		$log->amz_product_id = $this->product->id;
		$log->title = empty($found) ? '上传图片' : '更新图片';
		$log->content = '';
		$log->type = self::IMAGE;
		$log->num = count($reqArrList);
		$log->operator = empty($found) ? 1: 2;
		$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
		$log->create_date = time();

		$log->save();

		if (empty($log->id)) {
			throw new Exception('添加图片日志出错', 1);
		}
	}

	/**
	 * 上传库存
	 * 
	 * @return bool
	 */
	protected function updateQuantityAvaiable()
	{
		$reqArrList = array();

		//单品
		if ($this->product->product_is_multi == 0) {
				$reqArrList [] = array(
					'sku' => $this->product->seller_sku,
					'qty' => $this->product->inventory ? $this->product->inventory : 100,
					'latency' => 2,
				);
		}
		


		//多属性
		else if ($this->product->product_is_multi == 2) {
			foreach ($this->sonskues as $sonprd) {
				$reqArrList [] = array(
					'sku' => $sonprd->seller_sku,
					'qty' => $sonprd->inventory,
					'latency' => 2,
				);
			}
		}

		// $xmls[$this->product->sku] = $this->getRealXML($reqArrList, SubmitFeedRequest::AVAILABLE_INVENTORY);

		//一次性组装该XML, 不分开处理

		$found = UebModel::model('AmazonProductTask')->find("account_id=:aid AND amz_product_id=:id AND type=:type AND sku=:sku",
			array(
				':id' => $this->product->id,
				':aid' => $this->product->account_id,
				':type' => self::INVENTORY,
				':sku' => $this->product->sku,
				));

		$model = !empty($found) ? $found : new AmazonProductTask();

		$model->flow_no = $this->genUniqidId();
		$model->account_id = $this->product->account_id;
		$model->amz_product_id = $this->product->id;
		$model->sku = $this->product->sku;
		$model->type = self::INVENTORY;
		$model->xml = $this->getRealXML($reqArrList, SubmitFeedRequest::AVAILABLE_INVENTORY);
		$model->status = 1;
		$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
		$model->create_date = time();	

		$model->save();

		if (empty($model->id)) {
			throw new Exception("保存库存XML数据出错", 1);
		}

		//日志

		$log = new AmazonUpLog();

		$log->account_id = $this->product->account_id;
		$log->amz_product_id = $this->product->id;
		$log->title = empty($found) ? '上传库存' : '更新库存';
		$log->content = '';
		$log->type = self::INVENTORY;
		$log->num = count($reqArrList);
		$log->operator = empty($found) ? 1: 2;
		$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
		$log->create_date = time();

		$log->save();

		if (empty($log->id)) {
			throw new Exception('添加库存日志出错', 1);
		}
	}

	/**
	 * 上传价格
	 * 
	 * @return bool
	 */
	protected function assignPrice()
	{
		$xmls  = array(); // ???

		$sdate    = date("Y-m-d\TH:i:s\Z", time());
		$edate    = date('Y-m-d\TH:i:s\Z', time() + 90* 24 * 60 * 60);
		$currency = $this->_getCurrencyBySite($this->_getWebSite());
		if($this->product->product_is_multi == 0){
			$reqArrList = array(
				array(
					'sku' => $this->product->seller_sku,
					'currency' => $currency, 
					'stdprice' => $this->product->price,
					'stime' => $sdate,
					'etime' => $edate,
					'saleprice' => round($this->product->price*$this->product->discountrate, 2),
				),
			);
		}

		if ($this->product->product_is_multi == 2) {
			foreach ($this->sonskues as $sonprd) {
				$reqArrList [] = array(
					'sku' => $sonprd->seller_sku,
					'currency' => $currency,
					'stdprice' => $sonprd->price,
					'stime' => $sdate,
					'etime' => $edate,
					'saleprice' => round($sonprd->price*$this->product->discountrate, 2),
				);
			}
		}

		//一次性组装该XML, 不分开处理

		$found = UebModel::model('AmazonProductTask')->find("account_id=:aid AND amz_product_id=:id AND type=:type AND sku=:sku",
			array(
				':id' => $this->product->id,
				':aid' => $this->product->account_id, 
				':type' => self::PRICE,
				':sku' => $this->product->sku,
				));

		$model = !empty($found) ? $found : new AmazonProductTask();

		$model->flow_no = $this->genUniqidId();
		$model->account_id = $this->product->account_id;
		$model->amz_product_id = $this->product->id;
		$model->sku = $this->product->sku;
		$model->type = self::PRICE;
		$model->xml = $this->getRealXML($reqArrList, SubmitFeedRequest::PRICE);
		$model->status = 1;
		$model->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
		$model->create_date = time();	

		$model->save();

		if (empty($model->id)) {
			throw new Exception("保存价格XML数据出错", 1);
		}

		//日志

		$log = new AmazonUpLog();

		$log->account_id = $this->product->account_id;
		$log->amz_product_id = $this->product->id;
		$log->title = empty($found) ? '上传价格' : '更新价格';
		$log->content = '';
		$log->type = self::PRICE;
		$log->num = count($reqArrList);
		$log->operator = empty($found) ? 1: 2;
		$log->creator = Yii::app()->user->id?Yii::app()->user->id:$this->uid;
		$log->create_date = time();

		$log->save();

		if (empty($log->id)) {
			throw new Exception('添加价格日志出错', 1);
		}
	}


	/**
	 * 上传关系
	 * 
	 * @return bool
	 */
	protected function establishRelationships()
	{}

}
// end of class
